/* definition of dependencies for monitored services */

// ========================================================================================================================
// ipsec

// dependency of ipsec on ping
apply Dependency "ipsec_ping" to Service {
  parent_service_name = "PING"
  disable_checks = true
  assign where host.vars.transport == "IPSEC" && service.name == "IPSEC"
}

// ========================================================================================================================
// radsec

// dependency of radsec na ping
apply Dependency "radsec_ping" to Service {
  parent_service_name = "PING"
  disable_checks = true
  assign where host.vars.transport == "RADSEC" && host.vars.type != "SP" && service.name == "RADSEC"
}

// dependency of radsec sp only on ping
apply Dependency "radsec_sp_ping" to Service {
  parent_service_name = "PING"
  disable_checks = true
  assign where host.vars.transport == "RADSEC" && host.vars.type == "SP" && service.name == "RADSEC"
}

// ========================================================================================================================
// home realm

// dependency of home realm on ping
apply Dependency "home_realm_ping" to Service {
  parent_service_name = "PING"
  disable_checks = true
  assign where service.vars.home_realm_check == 1
}

// ========================================================================================================================
// visitors' realms

// in current state icinga2 is not able to do OR between multiple 
// services which the child servervice should depend on
// for more see https://github.com/Icinga/icinga2/issues/1869
//
// for this purpose an aggerated check service HOME-REALM-ALIVE was made
// it represents state of all home servers with home users
// the service is critical only if none of the home servers cannot authenticate the user

// dependency of visitors' realms on their home servers
apply Dependency "visitors_realms_home_servers" for (server in service.vars.home_servers) to Service {
  parent_host_name = server

  if(len(service.vars.home_servers) > 1) {      // multiple home servers
    parent_service_name = "HOME-REALM-ALIVE-" + service.vars.visitors_realm     // "virtual" service which represent states of all home servers
  } else {
    parent_service_name = "@" + service.vars.visitors_realm                     // one home server only, so only one service
  }
  
  disable_checks = true
  assign where service.vars.home_realm_check == 0 && get_service(server, "HOME-REALM-ALIVE-" + service.vars.visitors_realm) != null
}

// dependency of all other realms on home realm on every server
// in case there are multiple home realms on server, other realms depend on all of them simultaneously
apply Dependency "other_realms_home_realm" for(realm in host.vars.mon_realm) to Service {
  parent_service_name = "@" + realm
  disable_checks = true
  assign where service.vars.home_realm_check == 0 && get_service(host.name, "@" + realm) != null
}

// ========================================================================================================================
// visitors

// dependency of visitors on home realm
apply Dependency "visitors_home_realm" for (realm in host.vars.mon_realm) to Service {
    parent_service_name = "@" + realm
    disable_checks = true
    assign where service.name == "VISITORS" && host.vars.type != "SP" && get_service(host.name, "@" + realm) != null
}

// ========================================================================================================================
// big packet

// dependency of big_packet on radsec
apply Dependency "big_packet_radsec" to Service {
    parent_service_name = "RADSEC"
    disable_checks = true
    assign where host.vars.transport == "RADSEC" && host.vars.type != "SP" && service.name == "BIG-PACKET"
}

// dependency of big_packet on ipsec
apply Dependency "big_packet_ipsec" to Service {
    parent_service_name = "IPSEC"
    disable_checks = true
    assign where host.vars.transport == "IPSEC" && service.name == "BIG-PACKET"
}

// dependency of big_packet on cesnet.cz@homeservers
// icinga2 cannot do an OR dependency between two (or multiple) services
// because of this, service HOME-REALM-ALIVE was implemented and is used here

apply Dependency "big_packet_cesnet.cz@radius1.cesnet.cz" to Service {
    parent_service_name = "HOME-REALM-ALIVE-cesnet.cz"
    parent_host_name = "radius1.cesnet.cz"
    disable_checks = true
    assign where service.name == "BIG-PACKET"
}

// ========================================================================================================================
// calling station id

// dependency of calling station id on ping
apply Dependency "calling_station_id_ping" to Service {
    parent_service_name = "PING"
    disable_checks = true
    assign where service.name == "CALLING-STATION-ID"
}

// ========================================================================================================================
// chargeable user identity

// dependency of chargeable user identity on home realm
apply Dependency "chargeable_user_identity_home_realm" for (realm in host.vars.mon_realm) to Service {
    parent_service_name = "@" + realm
    disable_checks = true
    assign where match("CHARGEABLE-USER-IDENTITY-*", service.name) && host.vars.type != "SP"
}

// ========================================================================================================================
// cve-2017-9148

// dependency of cve on home realm
apply Dependency "cve_2017_9148_home_realm" for (realm in host.vars.mon_realm) to Service {
    parent_service_name = "@" + realm
    disable_checks = true
    assign where match("CVE-2017-9148-*", service.name) && host.vars.type != "SP"
}

// ========================================================================================================================
// fake-uid

// dependency of fake uid on home realm
apply Dependency "fake_uid_home_realm" for (realm in host.vars.mon_realm) to Service {
    parent_service_name = "@" + realm
    disable_checks = true
    assign where match("FAKE-UID-*", service.name) && host.vars.type != "SP"
}

// ========================================================================================================================
// operator name

// dependency of operator name on ping
apply Dependency "operator_name_ping" to Service {
    parent_service_name = "PING"
    disable_checks = true
    assign where service.name == "OPERATOR-NAME"
}

// ========================================================================================================================
// vcelka maja

// dependency of vcelka-maja on home relam
apply Dependency "vcelka_maja_home_realm" for (realm in host.vars.mon_realm) to Service {
    parent_service_name = "@" + realm
    disable_checks = true
    assign where match("VCELKA-MAJA-*", service.name) && host.vars.type != "SP"
}

// ========================================================================================================================
// institution-xml

// dependency of institution-xml on ping
apply Dependency "institution_xml_ping" to Service {
    parent_service_name = "PING"
    disable_checks = true
    assign where match("INSTITUTION-XML-*", service.name)
}
// ========================================================================================================================
